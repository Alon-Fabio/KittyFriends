{"version":3,"sources":["serviceWorker.js","Components/SearchBox.js","Components/Scroll.js","Components/Card.js","Components/CardList.js","Components/ErrorBoundry.js","Containers/App2.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","SearchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","margin","padding","borderRadius","children","React","memo","id","name","email","alt","src","CardArray","robots","map","robot","i","key","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","useState","Kittens","setKittens","SearchField","setSearchField","a","fetch","then","myUsers","json","Users","catch","err","console","useEffect","kittyFilter","filter","kitty","toLowerCase","includes","length","e","target","value","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wCCJSC,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,UAAU,OACX,2BACAA,UAAU,2BACVC,KAAK,SACLC,YAAY,iBACZC,SAAUJ,MCaPK,EAnBA,SAACC,GAEZ,OAEI,yBACIC,MACK,CAACC,UAAW,SACbC,OAAQ,kBACRC,OAAQ,OACRC,OAAO,OACPC,QAAQ,OACRC,aAAa,SAEhBP,EAAMQ,WCCJC,G,MAAAA,IAAMC,MAdR,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OAEI,yBAAKlB,UAAU,uDACX,yBAAKmB,IAAI,UAAUC,IAAG,+BAA0BJ,EAA1B,4BACtB,6BACI,4BAAKC,GACL,2BAAIC,SCYLG,EAnBG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAOC,GACf,OACI,kBAAC,EAAD,CACAC,IAAK,MAAMD,EACVT,GAAIM,EAAOG,GAAGT,GACfC,KAAMK,EAAOG,GAAGR,KAChBC,MAAOI,EAAOG,GAAGP,a,oCCY1BS,E,YAtBX,WAAYtB,GAAO,IAAD,8BACd,4CAAMA,KACDuB,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKpB,OAAIG,KAAKJ,MAAMC,SACJ,8DAEAG,KAAK3B,MAAMQ,a,GAjBPqB,aC8CZC,EA1CH,WAAO,IAAD,EAEgBC,mBAAS,IAFzB,mBAEPC,EAFO,KAEEC,EAFF,OAGwBF,mBAAS,IAHjC,mBAGPG,EAHO,KAGMC,EAHN,iDAWd,sBAAAC,EAAA,sEACIC,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAGA,EAAQC,UACvBF,MAAK,SAAAG,GAAK,OAAER,EAAWQ,MACvBC,OAAM,SAAAC,GAAG,OAAEC,QAAQnB,MAAMkB,MAJ9B,4CAXc,sBAkBdE,qBAAU,YAlBI,mCAmBVN,KACF,CAACL,IAGH,IAAMY,EAAcd,EAAQe,QAAO,SAAAC,GAC3B,OAAOA,EAAMpC,KAAKqC,cAAcC,SAAShB,EAAYe,kBAE7D,OAAQjB,EAAQmB,OAGR,yBAAKxD,UAAU,MACX,4CACA,kBAAC,EAAD,CAAWD,aAzBvB,SAAwB0D,GACpBjB,EAAeiB,EAAEC,OAAOC,UAyBhB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAWrC,OAAQ6B,OAP/B,wBAAInD,UAAU,MAAd,yBCzBZ4D,IAASC,OACG,kBAAC,EAAD,MACFC,SAASC,eAAe,SPuH5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.4bb65347.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({SearchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='bg-light-blue dib br3 tc'\r\n            type='search' \r\n            placeholder='Search Kittens'\r\n            onChange={SearchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return(\r\n\r\n        <div\r\n            style=\r\n                {{overflowY: 'scroll',\r\n                border: '1px solid black',\r\n                height: '70vh',\r\n                margin:'10px',\r\n                padding:'10px',\r\n                borderRadius:'10px',\r\n                }}>\r\n            {props.children}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        //The styls that are implemented in this div are short hand enabled by tachyons.\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n            <img alt='profile' src={`https://robohash.org/${id}?size=200x200&set=set4`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n//'React.memo()' tells the console that this function should only reload if one of the props change.\r\nexport default React.memo(Card);","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardArray = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((robot, i) => {\r\n                    return (\r\n                        <Card\r\n                        key={'rob'+i}\r\n                         id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardArray;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render() {\r\n        \r\n            if (this.state.hasError) {\r\n                return <h1>Opssy, something went wrong...</h1>\r\n            } else {\r\n                return this.props.children\r\n            }\r\n        \r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { useState, useEffect  } from 'react';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport CardArray from '../Components/CardList';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n\r\nconst App = () => {\r\n\r\n    const [Kittens, setKittens] = useState([]);\r\n    const [SearchField, setSearchField] = useState('');\r\n    \r\n    //This function is for the onChange call to SearchBox.\r\n    function onSearchChange(e) {\r\n        setSearchField(e.target.value);\r\n    }\r\n\r\n    //This function is for the useEffect.\r\n    async function myUsers() { await \r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(myUsers=> myUsers.json())\r\n        .then(Users=>setKittens(Users))\r\n        .catch(err=>console.error(err))\r\n    }\r\n\r\n    useEffect(() => {\r\n        myUsers();\r\n    },[SearchField] )\r\n\r\n    //Filtering the input from the SearchField.\r\n    const kittyFilter = Kittens.filter(kitty =>{\r\n            return kitty.name.toLowerCase().includes(SearchField.toLowerCase())\r\n        });\r\n    return !Kittens.length ?\r\n            <h1 className='tc'>loading, please wait</h1>\r\n        : \r\n            <div className='tc'>\r\n                <h1>KittyFriends</h1>\r\n                <SearchBox SearchChange = {onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardArray robots={kittyFilter} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        \r\n    \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './Containers/App2';\r\n\r\n\r\nReactDOM.render(\r\n            <App/>\r\n        , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}